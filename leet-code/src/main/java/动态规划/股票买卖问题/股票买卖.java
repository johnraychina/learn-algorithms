package 动态规划.股票买卖问题;

/**
 * <pre>
 * 121. 买卖股票的最佳时机（简单）
 * 122. 买卖股票的最佳时机 II（简单）
 * 123. 买卖股票的最佳时机 III（困难）
 * 188. 买卖股票的最佳时机 IV（困难）
 * 309. 最佳买卖股票时机含冷冻期（中等）
 * 714. 买卖股票的最佳时机含手续费（中等）
 *
 * 这个问题的「状态」有三个，第一个是天数，第二个是允许交易的最大次数，
 * 第三个是当前的持有状态（即之前说的 rest 的状态，我们不妨用 1 表示持有，0 表示没有持有）。
 * 然后我们用一个三维数组就可以装下这几种状态的全部组合：
 *
 * <code>
 * dp[i][k][0 or 1]
 * 0 <= i <= n-1, 1 <= k <= K
 * n 为天数，大 K 为最多交易数
 * 此问题共 n × K × 2 种状态，全部穷举就能搞定。
 *
 * for 0 <= i < n:
 *     for 1 <= k <= K:
 *         for s in {0, 1}:
 *             dp[i][k][s] = max(buy, sell, rest)
 * </code>
 * 而且我们可以用自然语言描述出每一个状态的含义，比如说 dp[3][2][1] 的含义就是：今天是第三天，我现在手上持有着股票，至今最多进行 2 次交易。
 * 再比如 dp[2][3][0] 的含义：今天是第二天，我现在手上没有持有股票，至今最多进行 3 次交易。很容易理解，对吧？
 * 我们想求的最终答案是 dp[n - 1][K][0]，即最后一天，最多允许 K 次交易，最多获得多少利润。
 * 读者可能问为什么不是 dp[n - 1][K][1]？因为 [1] 代表手上还持有股票，[0] 表示手上的股票已经卖出去了，很显然后者得到的利润一定大于前者。
 * 记住如何解释「状态」，一旦你觉得哪里不好理解，把它翻译成自然语言就容易理解了。
 *
 *
 * <code>
 *
 * dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])
 * max(   选择 rest  ,             选择 sell      )
 *
 * 解释：今天我没有持有股票，有两种可能：
 * 要么是我昨天就没有持有，然后今天选择 rest，所以我今天还是没有持有；
 * 要么是我昨天持有股票，但是今天我 sell 了，所以我今天没有持有股票了。
 *
 * dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])
 * max(   选择 rest  ,           选择 buy         )
 *
 * 解释：今天我持有着股票，有两种可能：
 * 要么我昨天就持有着股票，然后今天选择 rest，所以我今天还持有着股票；
 * 要么我昨天本没有持有，但今天我选择 buy，所以今天我就持有股票了。s
 * </code>
 *
 *
 * 现在，我们已经完成了动态规划中最困难的一步：状态转移方程。如果之前的内容你都可以理解，那么你已经可以秒杀所有问题了，
 * 只要套这个框架就行了。不过还差最后一点点，就是定义 base case，即最简单的情况。
 * <code>
 * dp[-1][k][0] = 0
 * 解释：因为 i 是从 0 开始的，所以 i = -1 意味着还没有开始，这时候的利润当然是 0 。
 * dp[-1][k][1] = -infinity
 * 解释：还没开始的时候，是不可能持有股票的，用负无穷表示这种不可能。
 * dp[i][0][0] = 0
 * 解释：因为 k 是从 1 开始的，所以 k = 0 意味着根本不允许交易，这时候利润当然是 0 。
 * dp[i][0][1] = -infinity
 * 解释：不允许交易的情况下，是不可能持有股票的，用负无穷表示这种不可能。
 * </code>
 *
 * </pre>
 *
 * @author Zhang Yi
 */
public class 股票买卖 {
}
