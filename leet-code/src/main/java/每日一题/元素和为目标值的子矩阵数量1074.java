package 每日一题;

/**
 * <pre> 1074. 元素和为目标值的子矩阵数量
 * 给出矩阵 matrix 和目标值 target，返回元素总和等于目标值的非空子矩阵的数量。
 * 子矩阵 x1, y1, x2, y2 是满足 x1 <= x <= x2 且 y1 <= y <= y2 的所有单元 matrix[x][y] 的集合。
 * 如果 (x1, y1, x2, y2) 和 (x1', y1', x2', y2') 两个子矩阵中部分坐标不同（如：x1 != x1'），那么这两个子矩阵也不同。
 * 示例 1：
 *
 * 输入：matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0
 * 输出：4
 * 解释：四个只含 0 的 1x1 子矩阵。
 * 示例 2：
 *
 * 输入：matrix = [[1,-1],[-1,1]], target = 0
 * 输出：5
 * 解释：两个 1x2 子矩阵，加上两个 2x1 子矩阵，再加上一个 2x2 子矩阵。
 * 示例 3：
 *
 * 输入：matrix = [[904]], target = 0
 * 输出：0
 *
 *
 * 提示：
 *
 * 1 <= matrix.length <= 100
 * 1 <= matrix[0].length <= 100
 * -1000 <= matrix[i] <= 1000
 * -10^8 <= target <= 10^8
 * </pre>
 */
public class 元素和为目标值的子矩阵数量1074 {
    public int numSubmatrixSumTarget(int[][] matrix, int target) {

        // 先从暴力解法思考：要从matrix中框选出一个矩阵，使得sum = target，有多少种选择？
        // 首先确定左上角位置，有m*n个选择, 列数[1~m]均摊为m/2,同理行数也是n/2, 那么时间复杂度数 O(m*m*n*n)，m和n相等，为O(n^4)
        // 确定好左上角和右下角坐标后，复用 304二位区域和检索逻辑，计算和。
        // 有没有更好的办法来优化O(n^4)

        return -1;
    }
}
