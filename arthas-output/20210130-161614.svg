<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950"
	 xmlns="http://www.w3.org/2000/svg">
	<style type="text/css">
		text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
		#search { opacity:0.1; cursor:pointer; }
		#search:hover, #search.show { opacity:1; }
		#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
		#title { text-anchor:middle; font-size:17px}
		#unzoom { cursor:pointer; }
		#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
		.hide { display:none; }
		.parent { opacity:0.5; }
	</style>
	<script type="text/ecmascript">
		<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
	</script>
	<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
	<text id="title" x="600" y="24">Flame Graph</text>
	<text id="details" x="10" y="933"></text>
	<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
	<text id="search" x="1090" y="24">Search</text>
	<text id="matched" x="1090" y="933"></text>
	<g id="frames">
		<g>
			<title>all (50 samples, 100.00%)</title>
			<rect x="10.0" y="899.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
			<text x="13.0" y="910.0">all</text>
		</g>
		<g>
			<title>java/lang/Thread.run (1 samples, 2.00%)</title>
			<rect x="10.0" y="883.0" width="23.6" height="15" fill="#53e453" rx="2" ry="2"/>
			<text x="13.0" y="894.0">j..</text>
		</g>
		<g>
			<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1 samples, 2.00%)</title>
			<rect x="10.0" y="867.0" width="23.6" height="15" fill="#66f766" rx="2" ry="2"/>
			<text x="13.0" y="878.0">j..</text>
		</g>
		<g>
			<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1 samples, 2.00%)</title>
			<rect x="10.0" y="851.0" width="23.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
			<text x="13.0" y="862.0">j..</text>
		</g>
		<g>
			<title>java/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask.run (1 samples, 2.00%)</title>
			<rect x="10.0" y="835.0" width="23.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
			<text x="13.0" y="846.0">j..</text>
		</g>
		<g>
			<title>java/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201 (1 samples, 2.00%)
			</title>
			<rect x="10.0" y="819.0" width="23.6" height="15" fill="#56e756" rx="2" ry="2"/>
			<text x="13.0" y="830.0">j..</text>
		</g>
		<g>
			<title>java/util/concurrent/FutureTask.run (1 samples, 2.00%)</title>
			<rect x="10.0" y="803.0" width="23.6" height="15" fill="#51e251" rx="2" ry="2"/>
			<text x="13.0" y="814.0">j..</text>
		</g>
		<g>
			<title>java/util/concurrent/Executors$RunnableAdapter.call (1 samples, 2.00%)</title>
			<rect x="10.0" y="787.0" width="23.6" height="15" fill="#64f564" rx="2" ry="2"/>
			<text x="13.0" y="798.0">j..</text>
		</g>
		<g>
			<title>com/taobao/arthas/core/shell/system/impl/ProcessImpl$CommandProcessTask.run (1 samples, 2.00%)
			</title>
			<rect x="10.0" y="771.0" width="23.6" height="15" fill="#64f564" rx="2" ry="2"/>
			<text x="13.0" y="782.0">c..</text>
		</g>
		<g>
			<title>com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl$ProcessHandler.handle (1 samples,
				2.00%)
			</title>
			<rect x="10.0" y="755.0" width="23.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
			<text x="13.0" y="766.0">c..</text>
		</g>
		<g>
			<title>com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl$ProcessHandler.handle (1 samples,
				2.00%)
			</title>
			<rect x="10.0" y="739.0" width="23.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
			<text x="13.0" y="750.0">c..</text>
		</g>
		<g>
			<title>com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl.access$100 (1 samples, 2.00%)</title>
			<rect x="10.0" y="723.0" width="23.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
			<text x="13.0" y="734.0">c..</text>
		</g>
		<g>
			<title>com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl.process (1 samples, 2.00%)</title>
			<rect x="10.0" y="707.0" width="23.6" height="15" fill="#68f968" rx="2" ry="2"/>
			<text x="13.0" y="718.0">c..</text>
		</g>
		<g>
			<title>com/taobao/arthas/core/command/monitor200/ProfilerCommand.process (1 samples, 2.00%)</title>
			<rect x="10.0" y="691.0" width="23.6" height="15" fill="#51e251" rx="2" ry="2"/>
			<text x="13.0" y="702.0">c..</text>
		</g>
		<g>
			<title>com/taobao/arthas/core/command/monitor200/ProfilerCommand.execute (1 samples, 2.00%)</title>
			<rect x="10.0" y="675.0" width="23.6" height="15" fill="#51e251" rx="2" ry="2"/>
			<text x="13.0" y="686.0">c..</text>
		</g>
		<g>
			<title>one/profiler/AsyncProfiler.execute (1 samples, 2.00%)</title>
			<rect x="10.0" y="659.0" width="23.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
			<text x="13.0" y="670.0">o..</text>
		</g>
		<g>
			<title>one/profiler/AsyncProfiler.execute0 (1 samples, 2.00%)</title>
			<rect x="10.0" y="643.0" width="23.6" height="15" fill="#64f564" rx="2" ry="2"/>
			<text x="13.0" y="654.0">o..</text>
		</g>
		<g>
			<title>Java_one_profiler_AsyncProfiler_execute0 (1 samples, 2.00%)</title>
			<rect x="10.0" y="627.0" width="23.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
			<text x="13.0" y="638.0">J..</text>
		</g>
		<g>
			<title>Profiler::runInternal(Arguments&amp;, std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt;
				&gt;&amp;) (1 samples, 2.00%)
			</title>
			<rect x="10.0" y="611.0" width="23.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
			<text x="13.0" y="622.0">P..</text>
		</g>
		<g>
			<title>Profiler::start(Arguments&amp;, bool) (1 samples, 2.00%)</title>
			<rect x="10.0" y="595.0" width="23.6" height="15" fill="#caca3c" rx="2" ry="2"/>
			<text x="13.0" y="606.0">P..</text>
		</g>
		<g>
			<title>Profiler::bindNativeLibraryLoad(JNIEnv_*, unsigned char (*)(JNIEnv_*, _jobject*, _jstring*, unsigned
				char)) (1 samples, 2.00%)
			</title>
			<rect x="10.0" y="579.0" width="23.6" height="15" fill="#d4d440" rx="2" ry="2"/>
			<text x="13.0" y="590.0">P..</text>
		</g>
		<g>
			<title>_dispatch_queue_attrs (1 samples, 2.00%)</title>
			<rect x="10.0" y="563.0" width="23.6" height="15" fill="#f57575" rx="2" ry="2"/>
			<text x="13.0" y="574.0">_..</text>
		</g>
		<g>
			<title>[unknown] (1 samples, 2.00%)</title>
			<rect x="10.0" y="547.0" width="23.6" height="15" fill="#f27171" rx="2" ry="2"/>
			<text x="13.0" y="558.0">[..</text>
		</g>
		<g>
			<title>[unknown] (1 samples, 2.00%)</title>
			<rect x="10.0" y="531.0" width="23.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
			<text x="13.0" y="542.0">[..</text>
		</g>
		<g>
			<title>[unknown] (1 samples, 2.00%)</title>
			<rect x="10.0" y="515.0" width="23.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
			<text x="13.0" y="526.0">[..</text>
		</g>
		<g>
			<title>[unknown] (1 samples, 2.00%)</title>
			<rect x="10.0" y="499.0" width="23.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
			<text x="13.0" y="510.0">[..</text>
		</g>
		<g>
			<title>[unknown] (1 samples, 2.00%)</title>
			<rect x="10.0" y="483.0" width="23.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
			<text x="13.0" y="494.0">[..</text>
		</g>
		<g>
			<title>thread_start (34 samples, 68.00%)</title>
			<rect x="33.6" y="883.0" width="802.4" height="15" fill="#f47474" rx="2" ry="2"/>
			<text x="36.6" y="894.0">thread_start</text>
		</g>
		<g>
			<title>_pthread_start (34 samples, 68.00%)</title>
			<rect x="33.6" y="867.0" width="802.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
			<text x="36.6" y="878.0">_pthread_start</text>
		</g>
		<g>
			<title>_pthread_body (34 samples, 68.00%)</title>
			<rect x="33.6" y="851.0" width="802.4" height="15" fill="#f67676" rx="2" ry="2"/>
			<text x="36.6" y="862.0">_pthread_body</text>
		</g>
		<g>
			<title>java_start(Thread*) (34 samples, 68.00%)</title>
			<rect x="33.6" y="835.0" width="802.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
			<text x="36.6" y="846.0">java_start(Thread*)</text>
		</g>
		<g>
			<title>JavaThread::run() (34 samples, 68.00%)</title>
			<rect x="33.6" y="819.0" width="802.4" height="15" fill="#dede43" rx="2" ry="2"/>
			<text x="36.6" y="830.0">JavaThread::run()</text>
		</g>
		<g>
			<title>JavaThread::thread_main_inner() (34 samples, 68.00%)</title>
			<rect x="33.6" y="803.0" width="802.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
			<text x="36.6" y="814.0">JavaThread::thread_main_inner()</text>
		</g>
		<g>
			<title>CompileBroker::compiler_thread_loop() (34 samples, 68.00%)</title>
			<rect x="33.6" y="787.0" width="802.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
			<text x="36.6" y="798.0">CompileBroker::compiler_thread_loop()</text>
		</g>
		<g>
			<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (34 samples, 68.00%)</title>
			<rect x="33.6" y="771.0" width="802.4" height="15" fill="#dede43" rx="2" ry="2"/>
			<text x="36.6" y="782.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
		</g>
		<g>
			<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (30 samples, 60.00%)</title>
			<rect x="33.6" y="755.0" width="708.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
			<text x="36.6" y="766.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
		</g>
		<g>
			<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (30 samples, 60.00%)</title>
			<rect x="33.6" y="739.0" width="708.0" height="15" fill="#dada42" rx="2" ry="2"/>
			<text x="36.6" y="750.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
		</g>
		<g>
			<title>Compile::Code_Gen() (21 samples, 42.00%)</title>
			<rect x="33.6" y="723.0" width="495.6" height="15" fill="#dede43" rx="2" ry="2"/>
			<text x="36.6" y="734.0">Compile::Code_Gen()</text>
		</g>
		<g>
			<title>Matcher::match() (1 samples, 2.00%)</title>
			<rect x="33.6" y="707.0" width="23.6" height="15" fill="#e5e545" rx="2" ry="2"/>
			<text x="36.6" y="718.0">M..</text>
		</g>
		<g>
			<title>Matcher::find_shared(Node*) (1 samples, 2.00%)</title>
			<rect x="33.6" y="691.0" width="23.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
			<text x="36.6" y="702.0">M..</text>
		</g>
		<g>
			<title>PhaseCFG::do_global_code_motion() (2 samples, 4.00%)</title>
			<rect x="57.2" y="707.0" width="47.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
			<text x="60.2" y="718.0">Phas..</text>
		</g>
		<g>
			<title>PhaseCFG::global_code_motion() (2 samples, 4.00%)</title>
			<rect x="57.2" y="691.0" width="47.2" height="15" fill="#e5e545" rx="2" ry="2"/>
			<text x="60.2" y="702.0">Phas..</text>
		</g>
		<g>
			<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 2.00%)</title>
			<rect x="57.2" y="675.0" width="23.6" height="15" fill="#dddd43" rx="2" ry="2"/>
			<text x="60.2" y="686.0">P..</text>
		</g>
		<g>
			<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 2.00%)
			</title>
			<rect x="80.8" y="675.0" width="23.6" height="15" fill="#dede43" rx="2" ry="2"/>
			<text x="83.8" y="686.0">P..</text>
		</g>
		<g>
			<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;,
				MachCallNode*, VectorSet&amp;) (1 samples, 2.00%)
			</title>
			<rect x="80.8" y="659.0" width="23.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
			<text x="83.8" y="670.0">P..</text>
		</g>
		<g>
			<title>add_call_kills(MachProjNode*, RegMask&amp;, char const*, bool) (1 samples, 2.00%)</title>
			<rect x="80.8" y="643.0" width="23.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
			<text x="83.8" y="654.0">a..</text>
		</g>
		<g>
			<title>PhaseChaitin::Register_Allocate() (18 samples, 36.00%)</title>
			<rect x="104.4" y="707.0" width="424.8" height="15" fill="#dada42" rx="2" ry="2"/>
			<text x="107.4" y="718.0">PhaseChaitin::Register_Allocate()</text>
		</g>
		<g>
			<title>PhaseChaitin::Select() (3 samples, 6.00%)</title>
			<rect x="104.4" y="691.0" width="70.8" height="15" fill="#e2e244" rx="2" ry="2"/>
			<text x="107.4" y="702.0">PhaseCha..</text>
		</g>
		<g>
			<title>IndexSetIterator::next() (1 samples, 2.00%)</title>
			<rect x="104.4" y="675.0" width="23.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
			<text x="107.4" y="686.0">I..</text>
		</g>
		<g>
			<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 2.00%)</title>
			<rect x="128.0" y="675.0" width="23.6" height="15" fill="#d5d540" rx="2" ry="2"/>
			<text x="131.0" y="686.0">P..</text>
		</g>
		<g>
			<title>RegMask::clear_to_sets(int) (1 samples, 2.00%)</title>
			<rect x="151.6" y="675.0" width="23.6" height="15" fill="#dede43" rx="2" ry="2"/>
			<text x="154.6" y="686.0">R..</text>
		</g>
		<g>
			<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 4.00%)</title>
			<rect x="175.2" y="691.0" width="47.2" height="15" fill="#d6d640" rx="2" ry="2"/>
			<text x="178.2" y="702.0">Phas..</text>
		</g>
		<g>
			<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 10.00%)</title>
			<rect x="222.4" y="691.0" width="118.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
			<text x="225.4" y="702.0">PhaseChaitin::..</text>
		</g>
		<g>
			<title>IndexSetIterator::advance_and_next() (1 samples, 2.00%)</title>
			<rect x="269.6" y="675.0" width="23.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
			<text x="272.6" y="686.0">I..</text>
		</g>
		<g>
			<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 2.00%)</title>
			<rect x="293.2" y="675.0" width="23.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
			<text x="296.2" y="686.0">P..</text>
		</g>
		<g>
			<title>RegMask::smear_to_sets(int) (1 samples, 2.00%)</title>
			<rect x="316.8" y="675.0" width="23.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
			<text x="319.8" y="686.0">R..</text>
		</g>
		<g>
			<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 2.00%)</title>
			<rect x="340.4" y="691.0" width="23.6" height="15" fill="#d6d640" rx="2" ry="2"/>
			<text x="343.4" y="702.0">P..</text>
		</g>
		<g>
			<title>RegMask::is_misaligned_pair() const (1 samples, 2.00%)</title>
			<rect x="340.4" y="675.0" width="23.6" height="15" fill="#e2e244" rx="2" ry="2"/>
			<text x="343.4" y="686.0">R..</text>
		</g>
		<g>
			<title>RegMask::is_aligned_pairs() const (1 samples, 2.00%)</title>
			<rect x="340.4" y="659.0" width="23.6" height="15" fill="#e3e345" rx="2" ry="2"/>
			<text x="343.4" y="670.0">R..</text>
		</g>
		<g>
			<title>PhaseChaitin::merge_multidefs() (1 samples, 2.00%)</title>
			<rect x="364.0" y="691.0" width="23.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
			<text x="367.0" y="702.0">P..</text>
		</g>
		<g>
			<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 6.00%)</title>
			<rect x="387.6" y="691.0" width="70.8" height="15" fill="#e3e345" rx="2" ry="2"/>
			<text x="390.6" y="702.0">PhaseCha..</text>
		</g>
		<g>
			<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples,
				2.00%)
			</title>
			<rect x="411.2" y="675.0" width="23.6" height="15" fill="#d7d741" rx="2" ry="2"/>
			<text x="414.2" y="686.0">P..</text>
		</g>
		<g>
			<title>PhaseChaitin::skip_copies(Node*) (1 samples, 2.00%)</title>
			<rect x="411.2" y="659.0" width="23.6" height="15" fill="#d7d741" rx="2" ry="2"/>
			<text x="414.2" y="670.0">P..</text>
		</g>
		<g>
			<title>YieldingFlexibleGangWorker::~YieldingFlexibleGangWorker() (1 samples, 2.00%)</title>
			<rect x="434.8" y="675.0" width="23.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
			<text x="437.8" y="686.0">Y..</text>
		</g>
		<g>
			<title>PhaseCoalesce::coalesce_driver() (1 samples, 2.00%)</title>
			<rect x="458.4" y="691.0" width="23.6" height="15" fill="#e5e545" rx="2" ry="2"/>
			<text x="461.4" y="702.0">P..</text>
		</g>
		<g>
			<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 2.00%)</title>
			<rect x="458.4" y="675.0" width="23.6" height="15" fill="#d6d640" rx="2" ry="2"/>
			<text x="461.4" y="686.0">P..</text>
		</g>
		<g>
			<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 2.00%)</title>
			<rect x="458.4" y="659.0" width="23.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
			<text x="461.4" y="670.0">P..</text>
		</g>
		<g>
			<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1
				samples, 2.00%)
			</title>
			<rect x="458.4" y="643.0" width="23.6" height="15" fill="#caca3c" rx="2" ry="2"/>
			<text x="461.4" y="654.0">I..</text>
		</g>
		<g>
			<title>IndexSetIterator::advance_and_next() (1 samples, 2.00%)</title>
			<rect x="458.4" y="627.0" width="23.6" height="15" fill="#e4e445" rx="2" ry="2"/>
			<text x="461.4" y="638.0">I..</text>
		</g>
		<g>
			<title>PhaseIFG::init(unsigned int) (1 samples, 2.00%)</title>
			<rect x="482.0" y="691.0" width="23.6" height="15" fill="#caca3c" rx="2" ry="2"/>
			<text x="485.0" y="702.0">P..</text>
		</g>
		<g>
			<title>_platform_bzero$VARIANT$Haswell (1 samples, 2.00%)</title>
			<rect x="482.0" y="675.0" width="23.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
			<text x="485.0" y="686.0">_..</text>
		</g>
		<g>
			<title>PhaseLive::compute(unsigned int) (1 samples, 2.00%)</title>
			<rect x="505.6" y="691.0" width="23.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
			<text x="508.6" y="702.0">P..</text>
		</g>
		<g>
			<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 2.00%)</title>
			<rect x="505.6" y="675.0" width="23.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
			<text x="508.6" y="686.0">P..</text>
		</g>
		<g>
			<title>Compile::Optimize() (7 samples, 14.00%)</title>
			<rect x="529.2" y="723.0" width="165.2" height="15" fill="#e3e345" rx="2" ry="2"/>
			<text x="532.2" y="734.0">Compile::Optimize()</text>
		</g>
		<g>
			<title>PhaseCCP::analyze() (1 samples, 2.00%)</title>
			<rect x="529.2" y="707.0" width="23.6" height="15" fill="#d7d741" rx="2" ry="2"/>
			<text x="532.2" y="718.0">P..</text>
		</g>
		<g>
			<title>TypeAryPtr::add_offset(long) const (1 samples, 2.00%)</title>
			<rect x="529.2" y="691.0" width="23.6" height="15" fill="#d5d540" rx="2" ry="2"/>
			<text x="532.2" y="702.0">T..</text>
		</g>
		<g>
			<title>TypeAryPtr::make(TypePtr::PTR, ciObject*, TypeAry const*, ciKlass*, bool, int, int, TypeOopPtr
				const*, int, bool) (1 samples, 2.00%)
			</title>
			<rect x="529.2" y="675.0" width="23.6" height="15" fill="#e4e445" rx="2" ry="2"/>
			<text x="532.2" y="686.0">T..</text>
		</g>
		<g>
			<title>TypeAry::ary_must_be_exact() const (1 samples, 2.00%)</title>
			<rect x="529.2" y="659.0" width="23.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
			<text x="532.2" y="670.0">T..</text>
		</g>
		<g>
			<title>PhaseCCP::do_transform() (1 samples, 2.00%)</title>
			<rect x="552.8" y="707.0" width="23.6" height="15" fill="#dede43" rx="2" ry="2"/>
			<text x="555.8" y="718.0">P..</text>
		</g>
		<g>
			<title>PhaseCCP::transform(Node*) (1 samples, 2.00%)</title>
			<rect x="552.8" y="691.0" width="23.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
			<text x="555.8" y="702.0">P..</text>
		</g>
		<g>
			<title>IfFalseNode::Opcode() const (1 samples, 2.00%)</title>
			<rect x="552.8" y="675.0" width="23.6" height="15" fill="#e0e044" rx="2" ry="2"/>
			<text x="555.8" y="686.0">I..</text>
		</g>
		<g>
			<title>PhaseIdealLoop::build_and_optimize(bool, bool) (5 samples, 10.00%)</title>
			<rect x="576.4" y="707.0" width="118.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
			<text x="579.4" y="718.0">PhaseIdealLoop..</text>
		</g>
		<g>
			<title>MultiNode::is_CFG() const (1 samples, 2.00%)</title>
			<rect x="576.4" y="691.0" width="23.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
			<text x="579.4" y="702.0">M..</text>
		</g>
		<g>
			<title>PhaseIdealLoop::Dominators() (1 samples, 2.00%)</title>
			<rect x="600.0" y="691.0" width="23.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
			<text x="603.0" y="702.0">P..</text>
		</g>
		<g>
			<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 2.00%)</title>
			<rect x="600.0" y="675.0" width="23.6" height="15" fill="#e2e244" rx="2" ry="2"/>
			<text x="603.0" y="686.0">N..</text>
		</g>
		<g>
			<title>PhaseIdealLoop::build_loop_tree() (2 samples, 4.00%)</title>
			<rect x="623.6" y="691.0" width="47.2" height="15" fill="#dada42" rx="2" ry="2"/>
			<text x="626.6" y="702.0">Phas..</text>
		</g>
		<g>
			<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 2.00%)</title>
			<rect x="647.2" y="675.0" width="23.6" height="15" fill="#dede43" rx="2" ry="2"/>
			<text x="650.2" y="686.0">P..</text>
		</g>
		<g>
			<title>PhaseIterGVN::optimize() (1 samples, 2.00%)</title>
			<rect x="670.8" y="691.0" width="23.6" height="15" fill="#dddd43" rx="2" ry="2"/>
			<text x="673.8" y="702.0">P..</text>
		</g>
		<g>
			<title>PhaseIterGVN::transform_old(Node*) (1 samples, 2.00%)</title>
			<rect x="670.8" y="675.0" width="23.6" height="15" fill="#e5e545" rx="2" ry="2"/>
			<text x="673.8" y="686.0">P..</text>
		</g>
		<g>
			<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 2.00%)</title>
			<rect x="670.8" y="659.0" width="23.6" height="15" fill="#e2e244" rx="2" ry="2"/>
			<text x="673.8" y="670.0">P..</text>
		</g>
		<g>
			<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 2.00%)</title>
			<rect x="670.8" y="643.0" width="23.6" height="15" fill="#cece3e" rx="2" ry="2"/>
			<text x="673.8" y="654.0">C..</text>
		</g>
		<g>
			<title>ParseGenerator::generate(JVMState*) (2 samples, 4.00%)</title>
			<rect x="694.4" y="723.0" width="47.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
			<text x="697.4" y="734.0">Pars..</text>
		</g>
		<g>
			<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 4.00%)</title>
			<rect x="694.4" y="707.0" width="47.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
			<text x="697.4" y="718.0">Pars..</text>
		</g>
		<g>
			<title>Parse::do_all_blocks() (2 samples, 4.00%)</title>
			<rect x="694.4" y="691.0" width="47.2" height="15" fill="#d7d741" rx="2" ry="2"/>
			<text x="697.4" y="702.0">Pars..</text>
		</g>
		<g>
			<title>Parse::do_one_block() (2 samples, 4.00%)</title>
			<rect x="694.4" y="675.0" width="47.2" height="15" fill="#d9d941" rx="2" ry="2"/>
			<text x="697.4" y="686.0">Pars..</text>
		</g>
		<g>
			<title>Parse::do_one_bytecode() (2 samples, 4.00%)</title>
			<rect x="694.4" y="659.0" width="47.2" height="15" fill="#e1e144" rx="2" ry="2"/>
			<text x="697.4" y="670.0">Pars..</text>
		</g>
		<g>
			<title>Parse::do_call() (2 samples, 4.00%)</title>
			<rect x="694.4" y="643.0" width="47.2" height="15" fill="#d4d440" rx="2" ry="2"/>
			<text x="697.4" y="654.0">Pars..</text>
		</g>
		<g>
			<title>ParseGenerator::generate(JVMState*) (2 samples, 4.00%)</title>
			<rect x="694.4" y="627.0" width="47.2" height="15" fill="#e1e144" rx="2" ry="2"/>
			<text x="697.4" y="638.0">Pars..</text>
		</g>
		<g>
			<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 4.00%)</title>
			<rect x="694.4" y="611.0" width="47.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
			<text x="697.4" y="622.0">Pars..</text>
		</g>
		<g>
			<title>Parse::do_all_blocks() (2 samples, 4.00%)</title>
			<rect x="694.4" y="595.0" width="47.2" height="15" fill="#d4d440" rx="2" ry="2"/>
			<text x="697.4" y="606.0">Pars..</text>
		</g>
		<g>
			<title>Parse::do_one_block() (2 samples, 4.00%)</title>
			<rect x="694.4" y="579.0" width="47.2" height="15" fill="#d8d841" rx="2" ry="2"/>
			<text x="697.4" y="590.0">Pars..</text>
		</g>
		<g>
			<title>Parse::do_one_bytecode() (2 samples, 4.00%)</title>
			<rect x="694.4" y="563.0" width="47.2" height="15" fill="#d6d640" rx="2" ry="2"/>
			<text x="697.4" y="574.0">Pars..</text>
		</g>
		<g>
			<title>Parse::do_call() (2 samples, 4.00%)</title>
			<rect x="694.4" y="547.0" width="47.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
			<text x="697.4" y="558.0">Pars..</text>
		</g>
		<g>
			<title>ParseGenerator::generate(JVMState*) (2 samples, 4.00%)</title>
			<rect x="694.4" y="531.0" width="47.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
			<text x="697.4" y="542.0">Pars..</text>
		</g>
		<g>
			<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 4.00%)</title>
			<rect x="694.4" y="515.0" width="47.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
			<text x="697.4" y="526.0">Pars..</text>
		</g>
		<g>
			<title>Parse::do_all_blocks() (2 samples, 4.00%)</title>
			<rect x="694.4" y="499.0" width="47.2" height="15" fill="#d9d941" rx="2" ry="2"/>
			<text x="697.4" y="510.0">Pars..</text>
		</g>
		<g>
			<title>Parse::do_one_block() (2 samples, 4.00%)</title>
			<rect x="694.4" y="483.0" width="47.2" height="15" fill="#e0e044" rx="2" ry="2"/>
			<text x="697.4" y="494.0">Pars..</text>
		</g>
		<g>
			<title>Parse::do_one_bytecode() (2 samples, 4.00%)</title>
			<rect x="694.4" y="467.0" width="47.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
			<text x="697.4" y="478.0">Pars..</text>
		</g>
		<g>
			<title>Parse::do_call() (2 samples, 4.00%)</title>
			<rect x="694.4" y="451.0" width="47.2" height="15" fill="#d8d841" rx="2" ry="2"/>
			<text x="697.4" y="462.0">Pars..</text>
		</g>
		<g>
			<title>ParseGenerator::generate(JVMState*) (1 samples, 2.00%)</title>
			<rect x="694.4" y="435.0" width="23.6" height="15" fill="#d6d640" rx="2" ry="2"/>
			<text x="697.4" y="446.0">P..</text>
		</g>
		<g>
			<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 2.00%)</title>
			<rect x="694.4" y="419.0" width="23.6" height="15" fill="#e4e445" rx="2" ry="2"/>
			<text x="697.4" y="430.0">P..</text>
		</g>
		<g>
			<title>Parse::do_all_blocks() (1 samples, 2.00%)</title>
			<rect x="694.4" y="403.0" width="23.6" height="15" fill="#dede43" rx="2" ry="2"/>
			<text x="697.4" y="414.0">P..</text>
		</g>
		<g>
			<title>Parse::do_one_block() (1 samples, 2.00%)</title>
			<rect x="694.4" y="387.0" width="23.6" height="15" fill="#d8d841" rx="2" ry="2"/>
			<text x="697.4" y="398.0">P..</text>
		</g>
		<g>
			<title>Parse::do_one_bytecode() (1 samples, 2.00%)</title>
			<rect x="694.4" y="371.0" width="23.6" height="15" fill="#e2e244" rx="2" ry="2"/>
			<text x="697.4" y="382.0">P..</text>
		</g>
		<g>
			<title>Parse::do_call() (1 samples, 2.00%)</title>
			<rect x="694.4" y="355.0" width="23.6" height="15" fill="#dada42" rx="2" ry="2"/>
			<text x="697.4" y="366.0">P..</text>
		</g>
		<g>
			<title>ParseGenerator::generate(JVMState*) (1 samples, 2.00%)</title>
			<rect x="694.4" y="339.0" width="23.6" height="15" fill="#e1e144" rx="2" ry="2"/>
			<text x="697.4" y="350.0">P..</text>
		</g>
		<g>
			<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 2.00%)</title>
			<rect x="694.4" y="323.0" width="23.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
			<text x="697.4" y="334.0">P..</text>
		</g>
		<g>
			<title>Parse::do_all_blocks() (1 samples, 2.00%)</title>
			<rect x="694.4" y="307.0" width="23.6" height="15" fill="#cece3e" rx="2" ry="2"/>
			<text x="697.4" y="318.0">P..</text>
		</g>
		<g>
			<title>Parse::do_one_block() (1 samples, 2.00%)</title>
			<rect x="694.4" y="291.0" width="23.6" height="15" fill="#dddd43" rx="2" ry="2"/>
			<text x="697.4" y="302.0">P..</text>
		</g>
		<g>
			<title>Parse::do_one_bytecode() (1 samples, 2.00%)</title>
			<rect x="694.4" y="275.0" width="23.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
			<text x="697.4" y="286.0">P..</text>
		</g>
		<g>
			<title>Parse::do_call() (1 samples, 2.00%)</title>
			<rect x="694.4" y="259.0" width="23.6" height="15" fill="#caca3c" rx="2" ry="2"/>
			<text x="697.4" y="270.0">P..</text>
		</g>
		<g>
			<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1
				samples, 2.00%)
			</title>
			<rect x="694.4" y="243.0" width="23.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
			<text x="697.4" y="254.0">C..</text>
		</g>
		<g>
			<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1
				samples, 2.00%)
			</title>
			<rect x="694.4" y="227.0" width="23.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
			<text x="697.4" y="238.0">I..</text>
		</g>
		<g>
			<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 2.00%)</title>
			<rect x="694.4" y="211.0" width="23.6" height="15" fill="#d4d440" rx="2" ry="2"/>
			<text x="697.4" y="222.0">I..</text>
		</g>
		<g>
			<title>ciMethod::get_flow_analysis() (1 samples, 2.00%)</title>
			<rect x="694.4" y="195.0" width="23.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
			<text x="697.4" y="206.0">c..</text>
		</g>
		<g>
			<title>ciTypeFlow::do_flow() (1 samples, 2.00%)</title>
			<rect x="694.4" y="179.0" width="23.6" height="15" fill="#dddd43" rx="2" ry="2"/>
			<text x="697.4" y="190.0">c..</text>
		</g>
		<g>
			<title>ciTypeFlow::flow_types() (1 samples, 2.00%)</title>
			<rect x="694.4" y="163.0" width="23.6" height="15" fill="#e4e445" rx="2" ry="2"/>
			<text x="697.4" y="174.0">c..</text>
		</g>
		<g>
			<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1
				samples, 2.00%)
			</title>
			<rect x="694.4" y="147.0" width="23.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
			<text x="697.4" y="158.0">c..</text>
		</g>
		<g>
			<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples,
				2.00%)
			</title>
			<rect x="694.4" y="131.0" width="23.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
			<text x="697.4" y="142.0">c..</text>
		</g>
		<g>
			<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 2.00%)</title>
			<rect x="694.4" y="115.0" width="23.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
			<text x="697.4" y="126.0">c..</text>
		</g>
		<g>
			<title>ciTypeFlow::StateVector::do_new(ciBytecodeStream*) (1 samples, 2.00%)</title>
			<rect x="694.4" y="99.0" width="23.6" height="15" fill="#e2e244" rx="2" ry="2"/>
			<text x="697.4" y="110.0">c..</text>
		</g>
		<g>
			<title>ciBytecodeStream::get_klass(bool&amp;) (1 samples, 2.00%)</title>
			<rect x="694.4" y="83.0" width="23.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
			<text x="697.4" y="94.0">c..</text>
		</g>
		<g>
			<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 2.00%)
			</title>
			<rect x="694.4" y="67.0" width="23.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
			<text x="697.4" y="78.0">c..</text>
		</g>
		<g>
			<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples,
				2.00%)
			</title>
			<rect x="694.4" y="51.0" width="23.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
			<text x="697.4" y="62.0">c..</text>
		</g>
		<g>
			<title>Monitor::lock(Thread*) (1 samples, 2.00%)</title>
			<rect x="694.4" y="35.0" width="23.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
			<text x="697.4" y="46.0">M..</text>
		</g>
		<g>
			<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 2.00%)</title>
			<rect x="718.0" y="435.0" width="23.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
			<text x="721.0" y="446.0">P..</text>
		</g>
		<g>
			<title>ParseGenerator::generate(JVMState*) (1 samples, 2.00%)</title>
			<rect x="718.0" y="419.0" width="23.6" height="15" fill="#d6d640" rx="2" ry="2"/>
			<text x="721.0" y="430.0">P..</text>
		</g>
		<g>
			<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 2.00%)</title>
			<rect x="718.0" y="403.0" width="23.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
			<text x="721.0" y="414.0">P..</text>
		</g>
		<g>
			<title>Parse::do_all_blocks() (1 samples, 2.00%)</title>
			<rect x="718.0" y="387.0" width="23.6" height="15" fill="#d9d941" rx="2" ry="2"/>
			<text x="721.0" y="398.0">P..</text>
		</g>
		<g>
			<title>Parse::do_one_block() (1 samples, 2.00%)</title>
			<rect x="718.0" y="371.0" width="23.6" height="15" fill="#e1e144" rx="2" ry="2"/>
			<text x="721.0" y="382.0">P..</text>
		</g>
		<g>
			<title>Parse::do_one_bytecode() (1 samples, 2.00%)</title>
			<rect x="718.0" y="355.0" width="23.6" height="15" fill="#d9d941" rx="2" ry="2"/>
			<text x="721.0" y="366.0">P..</text>
		</g>
		<g>
			<title>Parse::do_call() (1 samples, 2.00%)</title>
			<rect x="718.0" y="339.0" width="23.6" height="15" fill="#e4e445" rx="2" ry="2"/>
			<text x="721.0" y="350.0">P..</text>
		</g>
		<g>
			<title>ParseGenerator::generate(JVMState*) (1 samples, 2.00%)</title>
			<rect x="718.0" y="323.0" width="23.6" height="15" fill="#d8d841" rx="2" ry="2"/>
			<text x="721.0" y="334.0">P..</text>
		</g>
		<g>
			<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 2.00%)</title>
			<rect x="718.0" y="307.0" width="23.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
			<text x="721.0" y="318.0">P..</text>
		</g>
		<g>
			<title>Parse::create_entry_map() (1 samples, 2.00%)</title>
			<rect x="718.0" y="291.0" width="23.6" height="15" fill="#e5e545" rx="2" ry="2"/>
			<text x="721.0" y="302.0">P..</text>
		</g>
		<g>
			<title>GraphKit::null_check_receiver_before_call(ciMethod*) (1 samples, 2.00%)</title>
			<rect x="718.0" y="275.0" width="23.6" height="15" fill="#d4d440" rx="2" ry="2"/>
			<text x="721.0" y="286.0">G..</text>
		</g>
		<g>
			<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 2.00%)</title>
			<rect x="718.0" y="259.0" width="23.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
			<text x="721.0" y="270.0">G..</text>
		</g>
		<g>
			<title>Compile::too_many_traps(ciMethod*, int, Deoptimization::DeoptReason) (1 samples, 2.00%)</title>
			<rect x="718.0" y="243.0" width="23.6" height="15" fill="#d8d841" rx="2" ry="2"/>
			<text x="721.0" y="254.0">C..</text>
		</g>
		<g>
			<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 2.00%)</title>
			<rect x="718.0" y="227.0" width="23.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
			<text x="721.0" y="238.0">c..</text>
		</g>
		<g>
			<title>ciMethodData::data_at(int) (1 samples, 2.00%)</title>
			<rect x="718.0" y="211.0" width="23.6" height="15" fill="#d6d640" rx="2" ry="2"/>
			<text x="721.0" y="222.0">c..</text>
		</g>
		<g>
			<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 8.00%)</title>
			<rect x="741.6" y="755.0" width="94.4" height="15" fill="#d5d540" rx="2" ry="2"/>
			<text x="744.6" y="766.0">Compiler::c..</text>
		</g>
		<g>
			<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (4 samples, 8.00%)
			</title>
			<rect x="741.6" y="739.0" width="94.4" height="15" fill="#e4e445" rx="2" ry="2"/>
			<text x="744.6" y="750.0">Compilation..</text>
		</g>
		<g>
			<title>Compilation::compile_method() (4 samples, 8.00%)</title>
			<rect x="741.6" y="723.0" width="94.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
			<text x="744.6" y="734.0">Compilation..</text>
		</g>
		<g>
			<title>Compilation::compile_java_method() (3 samples, 6.00%)</title>
			<rect x="741.6" y="707.0" width="70.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
			<text x="744.6" y="718.0">Compilat..</text>
		</g>
		<g>
			<title>Compilation::build_hir() (1 samples, 2.00%)</title>
			<rect x="741.6" y="691.0" width="23.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
			<text x="744.6" y="702.0">C..</text>
		</g>
		<g>
			<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 2.00%)</title>
			<rect x="741.6" y="675.0" width="23.6" height="15" fill="#dada42" rx="2" ry="2"/>
			<text x="744.6" y="686.0">I..</text>
		</g>
		<g>
			<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 2.00%)</title>
			<rect x="741.6" y="659.0" width="23.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
			<text x="744.6" y="670.0">I..</text>
		</g>
		<g>
			<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 2.00%)</title>
			<rect x="741.6" y="643.0" width="23.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
			<text x="744.6" y="654.0">G..</text>
		</g>
		<g>
			<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 2.00%)</title>
			<rect x="741.6" y="627.0" width="23.6" height="15" fill="#dada42" rx="2" ry="2"/>
			<text x="744.6" y="638.0">G..</text>
		</g>
		<g>
			<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 2.00%)</title>
			<rect x="741.6" y="611.0" width="23.6" height="15" fill="#e0e044" rx="2" ry="2"/>
			<text x="744.6" y="622.0">G..</text>
		</g>
		<g>
			<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 2.00%)</title>
			<rect x="741.6" y="595.0" width="23.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
			<text x="744.6" y="606.0">G..</text>
		</g>
		<g>
			<title>ciBytecodeStream::has_appendix() (1 samples, 2.00%)</title>
			<rect x="741.6" y="579.0" width="23.6" height="15" fill="#d6d640" rx="2" ry="2"/>
			<text x="744.6" y="590.0">c..</text>
		</g>
		<g>
			<title>GrowableArray&lt;Metadata*&gt;::remove_at(int) (1 samples, 2.00%)</title>
			<rect x="741.6" y="563.0" width="23.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
			<text x="744.6" y="574.0">G..</text>
		</g>
		<g>
			<title>Compilation::emit_code_body() (2 samples, 4.00%)</title>
			<rect x="765.2" y="691.0" width="47.2" height="15" fill="#cece3e" rx="2" ry="2"/>
			<text x="768.2" y="702.0">Comp..</text>
		</g>
		<g>
			<title>Compilation::emit_code_epilog(LIR_Assembler*) (1 samples, 2.00%)</title>
			<rect x="765.2" y="675.0" width="23.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
			<text x="768.2" y="686.0">C..</text>
		</g>
		<g>
			<title>LIR_Assembler::emit_stubs(CodeStubList*) (1 samples, 2.00%)</title>
			<rect x="765.2" y="659.0" width="23.6" height="15" fill="#e3e345" rx="2" ry="2"/>
			<text x="768.2" y="670.0">L..</text>
		</g>
		<g>
			<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 2.00%)</title>
			<rect x="788.8" y="675.0" width="23.6" height="15" fill="#d4d440" rx="2" ry="2"/>
			<text x="791.8" y="686.0">L..</text>
		</g>
		<g>
			<title>LIR_Assembler::emit_lir_list(LIR_List*) (1 samples, 2.00%)</title>
			<rect x="788.8" y="659.0" width="23.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
			<text x="791.8" y="670.0">L..</text>
		</g>
		<g>
			<title>LIR_Assembler::emit_op1(LIR_Op1*) (1 samples, 2.00%)</title>
			<rect x="788.8" y="643.0" width="23.6" height="15" fill="#e4e445" rx="2" ry="2"/>
			<text x="791.8" y="654.0">L..</text>
		</g>
		<g>
			<title>LIR_Assembler::move_op(LIR_OprDesc*, LIR_OprDesc*, BasicType, LIR_PatchCode, CodeEmitInfo*, bool,
				bool, bool) (1 samples, 2.00%)
			</title>
			<rect x="788.8" y="627.0" width="23.6" height="15" fill="#d4d440" rx="2" ry="2"/>
			<text x="791.8" y="638.0">L..</text>
		</g>
		<g>
			<title>Compilation::initialize() (1 samples, 2.00%)</title>
			<rect x="812.4" y="707.0" width="23.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
			<text x="815.4" y="718.0">C..</text>
		</g>
		<g>
			<title>Dependencies::initialize(ciEnv*) (1 samples, 2.00%)</title>
			<rect x="812.4" y="691.0" width="23.6" height="15" fill="#e2e244" rx="2" ry="2"/>
			<text x="815.4" y="702.0">D..</text>
		</g>
		<g>
			<title>GrowableArray&lt;ciBaseObject*&gt;::GrowableArray(Arena*, int, int, ciBaseObject* const&amp;) (1
				samples, 2.00%)
			</title>
			<rect x="812.4" y="675.0" width="23.6" height="15" fill="#caca3c" rx="2" ry="2"/>
			<text x="815.4" y="686.0">G..</text>
		</g>
		<g>
			<title>图算法/最小体力消耗路径_1631并查集.main (15 samples, 30.00%)</title>
			<rect x="836.0" y="883.0" width="354.0" height="15" fill="#54e554" rx="2" ry="2"/>
			<text x="839.0" y="894.0">图算法/最小体力消耗路径_1631并查集..</text>
		</g>
		<g>
			<title>java/io/PrintStream.println (7 samples, 14.00%)</title>
			<rect x="859.6" y="867.0" width="165.2" height="15" fill="#52e352" rx="2" ry="2"/>
			<text x="862.6" y="878.0">java/io/PrintStream.p..</text>
		</g>
		<g>
			<title>java/io/PrintStream.newLine (4 samples, 8.00%)</title>
			<rect x="859.6" y="851.0" width="94.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
			<text x="862.6" y="862.0">java/io/Pri..</text>
		</g>
		<g>
			<title>java/io/BufferedOutputStream.flush (1 samples, 2.00%)</title>
			<rect x="859.6" y="835.0" width="23.6" height="15" fill="#57e857" rx="2" ry="2"/>
			<text x="862.6" y="846.0">j..</text>
		</g>
		<g>
			<title>java/io/OutputStream.flush (1 samples, 2.00%)</title>
			<rect x="859.6" y="819.0" width="23.6" height="15" fill="#54e554" rx="2" ry="2"/>
			<text x="862.6" y="830.0">j..</text>
		</g>
		<g>
			<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 2.00%)
			</title>
			<rect x="859.6" y="803.0" width="23.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
			<text x="862.6" y="814.0">I..</text>
		</g>
		<g>
			<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples,
				2.00%)
			</title>
			<rect x="859.6" y="787.0" width="23.6" height="15" fill="#d5d540" rx="2" ry="2"/>
			<text x="862.6" y="798.0">I..</text>
		</g>
		<g>
			<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*)
				(1 samples, 2.00%)
			</title>
			<rect x="859.6" y="771.0" width="23.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
			<text x="862.6" y="782.0">S..</text>
		</g>
		<g>
			<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*,
				JavaThread*) (1 samples, 2.00%)
			</title>
			<rect x="859.6" y="755.0" width="23.6" height="15" fill="#d5d540" rx="2" ry="2"/>
			<text x="862.6" y="766.0">A..</text>
		</g>
		<g>
			<title>AdvancedThresholdPolicy::create_mdo(methodHandle, JavaThread*) (1 samples, 2.00%)</title>
			<rect x="859.6" y="739.0" width="23.6" height="15" fill="#e0e044" rx="2" ry="2"/>
			<text x="862.6" y="750.0">A..</text>
		</g>
		<g>
			<title>Method::build_interpreter_method_data(methodHandle, Thread*) (1 samples, 2.00%)</title>
			<rect x="859.6" y="723.0" width="23.6" height="15" fill="#e3e345" rx="2" ry="2"/>
			<text x="862.6" y="734.0">M..</text>
		</g>
		<g>
			<title>MethodData::allocate(ClassLoaderData*, methodHandle, Thread*) (1 samples, 2.00%)</title>
			<rect x="859.6" y="707.0" width="23.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
			<text x="862.6" y="718.0">M..</text>
		</g>
		<g>
			<title>Metaspace::allocate(ClassLoaderData*, unsigned long, bool, MetaspaceObj::Type, Thread*) (1 samples,
				2.00%)
			</title>
			<rect x="859.6" y="691.0" width="23.6" height="15" fill="#cece3e" rx="2" ry="2"/>
			<text x="862.6" y="702.0">M..</text>
		</g>
		<g>
			<title>java/io/OutputStreamWriter.flushBuffer (3 samples, 6.00%)</title>
			<rect x="883.2" y="835.0" width="70.8" height="15" fill="#64f564" rx="2" ry="2"/>
			<text x="886.2" y="846.0">java/io/..</text>
		</g>
		<g>
			<title>sun/nio/cs/StreamEncoder.flushBuffer (3 samples, 6.00%)</title>
			<rect x="883.2" y="819.0" width="70.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
			<text x="886.2" y="830.0">sun/nio/..</text>
		</g>
		<g>
			<title>sun/nio/cs/StreamEncoder.implFlushBuffer (3 samples, 6.00%)</title>
			<rect x="883.2" y="803.0" width="70.8" height="15" fill="#57e857" rx="2" ry="2"/>
			<text x="886.2" y="814.0">sun/nio/..</text>
		</g>
		<g>
			<title>sun/nio/cs/StreamEncoder.writeBytes (3 samples, 6.00%)</title>
			<rect x="883.2" y="787.0" width="70.8" height="15" fill="#69fa69" rx="2" ry="2"/>
			<text x="886.2" y="798.0">sun/nio/..</text>
		</g>
		<g>
			<title>java/io/PrintStream.write (3 samples, 6.00%)</title>
			<rect x="883.2" y="771.0" width="70.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
			<text x="886.2" y="782.0">java/io/..</text>
		</g>
		<g>
			<title>java/io/BufferedOutputStream.flush (2 samples, 4.00%)</title>
			<rect x="883.2" y="755.0" width="47.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
			<text x="886.2" y="766.0">java..</text>
		</g>
		<g>
			<title>java/io/BufferedOutputStream.flushBuffer (2 samples, 4.00%)</title>
			<rect x="883.2" y="739.0" width="47.2" height="15" fill="#62f362" rx="2" ry="2"/>
			<text x="886.2" y="750.0">java..</text>
		</g>
		<g>
			<title>java/io/FileOutputStream.write (2 samples, 4.00%)</title>
			<rect x="883.2" y="723.0" width="47.2" height="15" fill="#68f968" rx="2" ry="2"/>
			<text x="886.2" y="734.0">java..</text>
		</g>
		<g>
			<title>java/io/FileOutputStream.writeBytes (2 samples, 4.00%)</title>
			<rect x="883.2" y="707.0" width="47.2" height="15" fill="#66f766" rx="2" ry="2"/>
			<text x="886.2" y="718.0">java..</text>
		</g>
		<g>
			<title>Java_java_io_FileOutputStream_writeBytes (2 samples, 4.00%)</title>
			<rect x="883.2" y="691.0" width="47.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
			<text x="886.2" y="702.0">Java..</text>
		</g>
		<g>
			<title>writeBytes (2 samples, 4.00%)</title>
			<rect x="883.2" y="675.0" width="47.2" height="15" fill="#fd8080" rx="2" ry="2"/>
			<text x="886.2" y="686.0">writ..</text>
		</g>
		<g>
			<title>write (1 samples, 2.00%)</title>
			<rect x="906.8" y="659.0" width="23.6" height="15" fill="#f37373" rx="2" ry="2"/>
			<text x="909.8" y="670.0">w..</text>
		</g>
		<g>
			<title>java/io/BufferedOutputStream.write (1 samples, 2.00%)</title>
			<rect x="930.4" y="755.0" width="23.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
			<text x="933.4" y="766.0">j..</text>
		</g>
		<g>
			<title>java/io/PrintStream.print (3 samples, 6.00%)</title>
			<rect x="954.0" y="851.0" width="70.8" height="15" fill="#68f968" rx="2" ry="2"/>
			<text x="957.0" y="862.0">java/io/..</text>
		</g>
		<g>
			<title>java/io/PrintStream.write (3 samples, 6.00%)</title>
			<rect x="954.0" y="835.0" width="70.8" height="15" fill="#64f564" rx="2" ry="2"/>
			<text x="957.0" y="846.0">java/io/..</text>
		</g>
		<g>
			<title>java/io/OutputStreamWriter.flushBuffer (3 samples, 6.00%)</title>
			<rect x="954.0" y="819.0" width="70.8" height="15" fill="#65f665" rx="2" ry="2"/>
			<text x="957.0" y="830.0">java/io/..</text>
		</g>
		<g>
			<title>sun/nio/cs/StreamEncoder.flushBuffer (3 samples, 6.00%)</title>
			<rect x="954.0" y="803.0" width="70.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
			<text x="957.0" y="814.0">sun/nio/..</text>
		</g>
		<g>
			<title>sun/nio/cs/StreamEncoder.implFlushBuffer (3 samples, 6.00%)</title>
			<rect x="954.0" y="787.0" width="70.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
			<text x="957.0" y="798.0">sun/nio/..</text>
		</g>
		<g>
			<title>sun/nio/cs/StreamEncoder.writeBytes (3 samples, 6.00%)</title>
			<rect x="954.0" y="771.0" width="70.8" height="15" fill="#69fa69" rx="2" ry="2"/>
			<text x="957.0" y="782.0">sun/nio/..</text>
		</g>
		<g>
			<title>java/io/PrintStream.write (3 samples, 6.00%)</title>
			<rect x="954.0" y="755.0" width="70.8" height="15" fill="#58e958" rx="2" ry="2"/>
			<text x="957.0" y="766.0">java/io/..</text>
		</g>
		<g>
			<title>java/io/BufferedOutputStream.flush (3 samples, 6.00%)</title>
			<rect x="954.0" y="739.0" width="70.8" height="15" fill="#60f160" rx="2" ry="2"/>
			<text x="957.0" y="750.0">java/io/..</text>
		</g>
		<g>
			<title>java/io/BufferedOutputStream.flushBuffer (3 samples, 6.00%)</title>
			<rect x="954.0" y="723.0" width="70.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
			<text x="957.0" y="734.0">java/io/..</text>
		</g>
		<g>
			<title>java/io/FileOutputStream.write (3 samples, 6.00%)</title>
			<rect x="954.0" y="707.0" width="70.8" height="15" fill="#53e453" rx="2" ry="2"/>
			<text x="957.0" y="718.0">java/io/..</text>
		</g>
		<g>
			<title>java/io/FileOutputStream.writeBytes (3 samples, 6.00%)</title>
			<rect x="954.0" y="691.0" width="70.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
			<text x="957.0" y="702.0">java/io/..</text>
		</g>
		<g>
			<title>Java_java_io_FileOutputStream_writeBytes (3 samples, 6.00%)</title>
			<rect x="954.0" y="675.0" width="70.8" height="15" fill="#f27171" rx="2" ry="2"/>
			<text x="957.0" y="686.0">Java_jav..</text>
		</g>
		<g>
			<title>writeBytes (3 samples, 6.00%)</title>
			<rect x="954.0" y="659.0" width="70.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
			<text x="957.0" y="670.0">writeBytes</text>
		</g>
		<g>
			<title>write (3 samples, 6.00%)</title>
			<rect x="954.0" y="643.0" width="70.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
			<text x="957.0" y="654.0">write</text>
		</g>
		<g>
			<title>图算法/最小体力消耗路径_1631并查集.minimumEffortPath (7 samples, 14.00%)</title>
			<rect x="1024.8" y="867.0" width="165.2" height="15" fill="#65f665" rx="2" ry="2"/>
			<text x="1027.8" y="878.0">图算法/最小体�..</text>
		</g>
		<g>
			<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 2.00%)</title>
			<rect x="1048.4" y="851.0" width="23.6" height="15" fill="#e2e244" rx="2" ry="2"/>
			<text x="1051.4" y="862.0">R..</text>
		</g>
		<g>
			<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*)
				(1 samples, 2.00%)
			</title>
			<rect x="1048.4" y="835.0" width="23.6" height="15" fill="#dddd43" rx="2" ry="2"/>
			<text x="1051.4" y="846.0">S..</text>
		</g>
		<g>
			<title>AdvancedThresholdPolicy::method_back_branch_event(methodHandle, methodHandle, int, CompLevel,
				nmethod*, JavaThread*) (1 samples, 2.00%)
			</title>
			<rect x="1048.4" y="819.0" width="23.6" height="15" fill="#e0e044" rx="2" ry="2"/>
			<text x="1051.4" y="830.0">A..</text>
		</g>
		<g>
			<title>AdvancedThresholdPolicy::loop_event(Method*, CompLevel) (1 samples, 2.00%)</title>
			<rect x="1048.4" y="803.0" width="23.6" height="15" fill="#dddd43" rx="2" ry="2"/>
			<text x="1051.4" y="814.0">A..</text>
		</g>
		<g>
			<title>AdvancedThresholdPolicy::common(bool (AdvancedThresholdPolicy::*)(int, int, CompLevel), Method*,
				CompLevel, bool) (1 samples, 2.00%)
			</title>
			<rect x="1048.4" y="787.0" width="23.6" height="15" fill="#dede43" rx="2" ry="2"/>
			<text x="1051.4" y="798.0">A..</text>
		</g>
		<g>
			<title>Method::backedge_count() (1 samples, 2.00%)</title>
			<rect x="1048.4" y="771.0" width="23.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
			<text x="1051.4" y="782.0">M..</text>
		</g>
		<g>
			<title>java/util/ArrayList.sort (2 samples, 4.00%)</title>
			<rect x="1072.0" y="851.0" width="47.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
			<text x="1075.0" y="862.0">java..</text>
		</g>
		<g>
			<title>java/util/Arrays.sort (2 samples, 4.00%)</title>
			<rect x="1072.0" y="835.0" width="47.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
			<text x="1075.0" y="846.0">java..</text>
		</g>
		<g>
			<title>java/util/TimSort.sort (2 samples, 4.00%)</title>
			<rect x="1072.0" y="819.0" width="47.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
			<text x="1075.0" y="830.0">java..</text>
		</g>
		<g>
			<title>java/util/TimSort.&lt;init&gt; (1 samples, 2.00%)</title>
			<rect x="1072.0" y="803.0" width="23.6" height="15" fill="#51e251" rx="2" ry="2"/>
			<text x="1075.0" y="814.0">j..</text>
		</g>
		<g>
			<title>java/lang/reflect/Array.newInstance (1 samples, 2.00%)</title>
			<rect x="1072.0" y="787.0" width="23.6" height="15" fill="#65f665" rx="2" ry="2"/>
			<text x="1075.0" y="798.0">j..</text>
		</g>
		<g>
			<title>java/lang/reflect/Array.newArray (1 samples, 2.00%)</title>
			<rect x="1072.0" y="771.0" width="23.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
			<text x="1075.0" y="782.0">j..</text>
		</g>
		<g>
			<title>JVM_NewArray (1 samples, 2.00%)</title>
			<rect x="1072.0" y="755.0" width="23.6" height="15" fill="#f57474" rx="2" ry="2"/>
			<text x="1075.0" y="766.0">J..</text>
		</g>
		<g>
			<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 2.00%)</title>
			<rect x="1072.0" y="739.0" width="23.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
			<text x="1075.0" y="750.0">I..</text>
		</g>
		<g>
			<title>InstanceKlass::array_klass_impl(instanceKlassHandle, bool, int, Thread*) (1 samples, 2.00%)</title>
			<rect x="1072.0" y="723.0" width="23.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
			<text x="1075.0" y="734.0">I..</text>
		</g>
		<g>
			<title>java/util/TimSort.binarySort (1 samples, 2.00%)</title>
			<rect x="1095.6" y="803.0" width="23.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
			<text x="1098.6" y="814.0">j..</text>
		</g>
		<g>
			<title>java/util/Comparator.comparingInt (1 samples, 2.00%)</title>
			<rect x="1119.2" y="851.0" width="23.6" height="15" fill="#69fa69" rx="2" ry="2"/>
			<text x="1122.2" y="862.0">j..</text>
		</g>
		<g>
			<title>java/lang/invoke/MethodHandleNatives.linkMethodHandleConstant (1 samples, 2.00%)</title>
			<rect x="1119.2" y="835.0" width="23.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
			<text x="1122.2" y="846.0">j..</text>
		</g>
		<g>
			<title>java/lang/invoke/MethodHandles$Lookup.linkMethodHandleConstant (1 samples, 2.00%)</title>
			<rect x="1119.2" y="819.0" width="23.6" height="15" fill="#60f160" rx="2" ry="2"/>
			<text x="1122.2" y="830.0">j..</text>
		</g>
		<g>
			<title>java/lang/invoke/MethodHandles$Lookup.getDirectMethodForConstant (1 samples, 2.00%)</title>
			<rect x="1119.2" y="803.0" width="23.6" height="15" fill="#54e554" rx="2" ry="2"/>
			<text x="1122.2" y="814.0">j..</text>
		</g>
		<g>
			<title>java/lang/invoke/MethodHandles$Lookup.getDirectMethodNoSecurityManager (1 samples, 2.00%)</title>
			<rect x="1119.2" y="787.0" width="23.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
			<text x="1122.2" y="798.0">j..</text>
		</g>
		<g>
			<title>java/lang/invoke/MethodHandles$Lookup.getDirectMethodCommon (1 samples, 2.00%)</title>
			<rect x="1119.2" y="771.0" width="23.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
			<text x="1122.2" y="782.0">j..</text>
		</g>
		<g>
			<title>java/lang/invoke/DirectMethodHandle.make (1 samples, 2.00%)</title>
			<rect x="1119.2" y="755.0" width="23.6" height="15" fill="#56e756" rx="2" ry="2"/>
			<text x="1122.2" y="766.0">j..</text>
		</g>
		<g>
			<title>java/lang/invoke/DirectMethodHandle.preparedLambdaForm (1 samples, 2.00%)</title>
			<rect x="1119.2" y="739.0" width="23.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
			<text x="1122.2" y="750.0">j..</text>
		</g>
		<g>
			<title>java/lang/invoke/DirectMethodHandle.preparedLambdaForm (1 samples, 2.00%)</title>
			<rect x="1119.2" y="723.0" width="23.6" height="15" fill="#59ea59" rx="2" ry="2"/>
			<text x="1122.2" y="734.0">j..</text>
		</g>
		<g>
			<title>java/lang/invoke/DirectMethodHandle.makePreparedLambdaForm (1 samples, 2.00%)</title>
			<rect x="1119.2" y="707.0" width="23.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
			<text x="1122.2" y="718.0">j..</text>
		</g>
		<g>
			<title>java/lang/invoke/LambdaForm.compileToBytecode (1 samples, 2.00%)</title>
			<rect x="1119.2" y="691.0" width="23.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
			<text x="1122.2" y="702.0">j..</text>
		</g>
		<g>
			<title>java/lang/invoke/InvokerBytecodeGenerator.generateCustomizedCode (1 samples, 2.00%)</title>
			<rect x="1119.2" y="675.0" width="23.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
			<text x="1122.2" y="686.0">j..</text>
		</g>
		<g>
			<title>java/lang/invoke/InvokerBytecodeGenerator.generateCustomizedCodeBytes (1 samples, 2.00%)</title>
			<rect x="1119.2" y="659.0" width="23.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
			<text x="1122.2" y="670.0">j..</text>
		</g>
		<g>
			<title>java/lang/invoke/InvokerBytecodeGenerator.emitStoreResult (1 samples, 2.00%)</title>
			<rect x="1119.2" y="643.0" width="23.6" height="15" fill="#68f968" rx="2" ry="2"/>
			<text x="1122.2" y="654.0">j..</text>
		</g>
		<g>
			<title>图算法/最小体力消耗路径_1631并查集$QuickFindUF.union (2 samples, 4.00%)</title>
			<rect x="1142.8" y="851.0" width="47.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
			<text x="1145.8" y="862.0">图�..</text>
		</g>
	</g>
</svg>
